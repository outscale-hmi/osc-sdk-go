/*
 * 3DS OUTSCALE API
 *
 * Welcome to the 3DS OUTSCALE's API documentation.<br /><br />  The 3DS OUTSCALE API enables you to manage your resources in the 3DS OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the 3DS OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the 3DS OUTSCALE API. You can find a list of the differences [here](https://wiki.outscale.net/display/EN/3DS+OUTSCALE+APIs+Reference).<br /><br />  You can also manage your resources using the [Cockpit](https://wiki.outscale.net/display/EN/About+Cockpit) web interface.
 *
 * API version: 1.6
 * Contact: support@outscale.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osc

import (
	"encoding/json"
)

// FiltersMasterKey One or more filters.
type FiltersMasterKey struct {
	// The descriptions of the master keys.
	Descriptions *[]string `json:"Descriptions,omitempty"`
	// The IDs of the master keys.
	MasterKeyIds *[]string `json:"MasterKeyIds,omitempty"`
	// The states of the master keys (`Enabled` \\| `Disabled` \\| `PendingDeletion`).
	States *[]string `json:"States,omitempty"`
}

// NewFiltersMasterKey instantiates a new FiltersMasterKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiltersMasterKey() *FiltersMasterKey {
	this := FiltersMasterKey{}
	return &this
}

// NewFiltersMasterKeyWithDefaults instantiates a new FiltersMasterKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiltersMasterKeyWithDefaults() *FiltersMasterKey {
	this := FiltersMasterKey{}
	return &this
}

// GetDescriptions returns the Descriptions field value if set, zero value otherwise.
func (o *FiltersMasterKey) GetDescriptions() []string {
	if o == nil || o.Descriptions == nil {
		var ret []string
		return ret
	}
	return *o.Descriptions
}

// GetDescriptionsOk returns a tuple with the Descriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersMasterKey) GetDescriptionsOk() (*[]string, bool) {
	if o == nil || o.Descriptions == nil {
		return nil, false
	}
	return o.Descriptions, true
}

// HasDescriptions returns a boolean if a field has been set.
func (o *FiltersMasterKey) HasDescriptions() bool {
	if o != nil && o.Descriptions != nil {
		return true
	}

	return false
}

// SetDescriptions gets a reference to the given []string and assigns it to the Descriptions field.
func (o *FiltersMasterKey) SetDescriptions(v []string) {
	o.Descriptions = &v
}

// GetMasterKeyIds returns the MasterKeyIds field value if set, zero value otherwise.
func (o *FiltersMasterKey) GetMasterKeyIds() []string {
	if o == nil || o.MasterKeyIds == nil {
		var ret []string
		return ret
	}
	return *o.MasterKeyIds
}

// GetMasterKeyIdsOk returns a tuple with the MasterKeyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersMasterKey) GetMasterKeyIdsOk() (*[]string, bool) {
	if o == nil || o.MasterKeyIds == nil {
		return nil, false
	}
	return o.MasterKeyIds, true
}

// HasMasterKeyIds returns a boolean if a field has been set.
func (o *FiltersMasterKey) HasMasterKeyIds() bool {
	if o != nil && o.MasterKeyIds != nil {
		return true
	}

	return false
}

// SetMasterKeyIds gets a reference to the given []string and assigns it to the MasterKeyIds field.
func (o *FiltersMasterKey) SetMasterKeyIds(v []string) {
	o.MasterKeyIds = &v
}

// GetStates returns the States field value if set, zero value otherwise.
func (o *FiltersMasterKey) GetStates() []string {
	if o == nil || o.States == nil {
		var ret []string
		return ret
	}
	return *o.States
}

// GetStatesOk returns a tuple with the States field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersMasterKey) GetStatesOk() (*[]string, bool) {
	if o == nil || o.States == nil {
		return nil, false
	}
	return o.States, true
}

// HasStates returns a boolean if a field has been set.
func (o *FiltersMasterKey) HasStates() bool {
	if o != nil && o.States != nil {
		return true
	}

	return false
}

// SetStates gets a reference to the given []string and assigns it to the States field.
func (o *FiltersMasterKey) SetStates(v []string) {
	o.States = &v
}

func (o FiltersMasterKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Descriptions != nil {
		toSerialize["Descriptions"] = o.Descriptions
	}
	if o.MasterKeyIds != nil {
		toSerialize["MasterKeyIds"] = o.MasterKeyIds
	}
	if o.States != nil {
		toSerialize["States"] = o.States
	}
	return json.Marshal(toSerialize)
}

type NullableFiltersMasterKey struct {
	value *FiltersMasterKey
	isSet bool
}

func (v NullableFiltersMasterKey) Get() *FiltersMasterKey {
	return v.value
}

func (v *NullableFiltersMasterKey) Set(val *FiltersMasterKey) {
	v.value = val
	v.isSet = true
}

func (v NullableFiltersMasterKey) IsSet() bool {
	return v.isSet
}

func (v *NullableFiltersMasterKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiltersMasterKey(val *FiltersMasterKey) *NullableFiltersMasterKey {
	return &NullableFiltersMasterKey{value: val, isSet: true}
}

func (v NullableFiltersMasterKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiltersMasterKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
