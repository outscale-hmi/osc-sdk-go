/*
 * 3DS OUTSCALE API
 *
 * Welcome to the 3DS OUTSCALE's API documentation.<br /><br />  The 3DS OUTSCALE API enables you to manage your resources in the 3DS OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the 3DS OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the 3DS OUTSCALE API. You can find a list of the differences [here](https://wiki.outscale.net/display/EN/3DS+OUTSCALE+APIs+Reference).<br /><br />  You can also manage your resources using the [Cockpit](https://wiki.outscale.net/display/EN/About+Cockpit) web interface.
 *
 * API version: 1.6
 * Contact: support@outscale.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osc

import (
	"encoding/json"
)

// DecryptCiphertextRequest struct for DecryptCiphertextRequest
type DecryptCiphertextRequest struct {
	// The ciphertext you want to decrypt.
	Ciphertext string `json:"Ciphertext"`
	// If `true`, checks whether you have the required permissions to perform the action.
	DryRun *bool `json:"DryRun,omitempty"`
	// Information about the encryption context.
	EncryptionContext *map[string]string `json:"EncryptionContext,omitempty"`
}

// NewDecryptCiphertextRequest instantiates a new DecryptCiphertextRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecryptCiphertextRequest(ciphertext string, ) *DecryptCiphertextRequest {
	this := DecryptCiphertextRequest{}
	this.Ciphertext = ciphertext
	return &this
}

// NewDecryptCiphertextRequestWithDefaults instantiates a new DecryptCiphertextRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecryptCiphertextRequestWithDefaults() *DecryptCiphertextRequest {
	this := DecryptCiphertextRequest{}
	return &this
}

// GetCiphertext returns the Ciphertext field value
func (o *DecryptCiphertextRequest) GetCiphertext() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Ciphertext
}

// GetCiphertextOk returns a tuple with the Ciphertext field value
// and a boolean to check if the value has been set.
func (o *DecryptCiphertextRequest) GetCiphertextOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Ciphertext, true
}

// SetCiphertext sets field value
func (o *DecryptCiphertextRequest) SetCiphertext(v string) {
	o.Ciphertext = v
}

// GetDryRun returns the DryRun field value if set, zero value otherwise.
func (o *DecryptCiphertextRequest) GetDryRun() bool {
	if o == nil || o.DryRun == nil {
		var ret bool
		return ret
	}
	return *o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptCiphertextRequest) GetDryRunOk() (*bool, bool) {
	if o == nil || o.DryRun == nil {
		return nil, false
	}
	return o.DryRun, true
}

// HasDryRun returns a boolean if a field has been set.
func (o *DecryptCiphertextRequest) HasDryRun() bool {
	if o != nil && o.DryRun != nil {
		return true
	}

	return false
}

// SetDryRun gets a reference to the given bool and assigns it to the DryRun field.
func (o *DecryptCiphertextRequest) SetDryRun(v bool) {
	o.DryRun = &v
}

// GetEncryptionContext returns the EncryptionContext field value if set, zero value otherwise.
func (o *DecryptCiphertextRequest) GetEncryptionContext() map[string]string {
	if o == nil || o.EncryptionContext == nil {
		var ret map[string]string
		return ret
	}
	return *o.EncryptionContext
}

// GetEncryptionContextOk returns a tuple with the EncryptionContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptCiphertextRequest) GetEncryptionContextOk() (*map[string]string, bool) {
	if o == nil || o.EncryptionContext == nil {
		return nil, false
	}
	return o.EncryptionContext, true
}

// HasEncryptionContext returns a boolean if a field has been set.
func (o *DecryptCiphertextRequest) HasEncryptionContext() bool {
	if o != nil && o.EncryptionContext != nil {
		return true
	}

	return false
}

// SetEncryptionContext gets a reference to the given map[string]string and assigns it to the EncryptionContext field.
func (o *DecryptCiphertextRequest) SetEncryptionContext(v map[string]string) {
	o.EncryptionContext = &v
}

func (o DecryptCiphertextRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["Ciphertext"] = o.Ciphertext
	}
	if o.DryRun != nil {
		toSerialize["DryRun"] = o.DryRun
	}
	if o.EncryptionContext != nil {
		toSerialize["EncryptionContext"] = o.EncryptionContext
	}
	return json.Marshal(toSerialize)
}

type NullableDecryptCiphertextRequest struct {
	value *DecryptCiphertextRequest
	isSet bool
}

func (v NullableDecryptCiphertextRequest) Get() *DecryptCiphertextRequest {
	return v.value
}

func (v *NullableDecryptCiphertextRequest) Set(val *DecryptCiphertextRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDecryptCiphertextRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDecryptCiphertextRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecryptCiphertextRequest(val *DecryptCiphertextRequest) *NullableDecryptCiphertextRequest {
	return &NullableDecryptCiphertextRequest{value: val, isSet: true}
}

func (v NullableDecryptCiphertextRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecryptCiphertextRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


