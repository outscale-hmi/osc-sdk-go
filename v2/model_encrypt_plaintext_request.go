/*
 * 3DS OUTSCALE API
 *
 * Welcome to the 3DS OUTSCALE's API documentation.<br /><br />  The 3DS OUTSCALE API enables you to manage your resources in the 3DS OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the 3DS OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the 3DS OUTSCALE API. You can find a list of the differences [here](https://wiki.outscale.net/display/EN/3DS+OUTSCALE+APIs+Reference).<br /><br />  You can also manage your resources using the [Cockpit](https://wiki.outscale.net/display/EN/About+Cockpit) web interface.
 *
 * API version: 1.6
 * Contact: support@outscale.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osc

import (
	"encoding/json"
)

// EncryptPlaintextRequest struct for EncryptPlaintextRequest
type EncryptPlaintextRequest struct {
	// If `true`, checks whether you have the required permissions to perform the action.
	DryRun *bool `json:"DryRun,omitempty"`
	// Information about the encryption context.
	EncryptionContext *map[string]string `json:"EncryptionContext,omitempty"`
	// The ID of the master key used to encrypt the data.
	MasterKeyId string `json:"MasterKeyId"`
	// The plaintext you want to encrypt, encoded in base64.<br /> This base64-encoded plaintext must contain between 1 and 4096 characters.
	Plaintext string `json:"Plaintext"`
}

// NewEncryptPlaintextRequest instantiates a new EncryptPlaintextRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptPlaintextRequest(masterKeyId string, plaintext string) *EncryptPlaintextRequest {
	this := EncryptPlaintextRequest{}
	this.MasterKeyId = masterKeyId
	this.Plaintext = plaintext
	return &this
}

// NewEncryptPlaintextRequestWithDefaults instantiates a new EncryptPlaintextRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptPlaintextRequestWithDefaults() *EncryptPlaintextRequest {
	this := EncryptPlaintextRequest{}
	return &this
}

// GetDryRun returns the DryRun field value if set, zero value otherwise.
func (o *EncryptPlaintextRequest) GetDryRun() bool {
	if o == nil || o.DryRun == nil {
		var ret bool
		return ret
	}
	return *o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptPlaintextRequest) GetDryRunOk() (*bool, bool) {
	if o == nil || o.DryRun == nil {
		return nil, false
	}
	return o.DryRun, true
}

// HasDryRun returns a boolean if a field has been set.
func (o *EncryptPlaintextRequest) HasDryRun() bool {
	if o != nil && o.DryRun != nil {
		return true
	}

	return false
}

// SetDryRun gets a reference to the given bool and assigns it to the DryRun field.
func (o *EncryptPlaintextRequest) SetDryRun(v bool) {
	o.DryRun = &v
}

// GetEncryptionContext returns the EncryptionContext field value if set, zero value otherwise.
func (o *EncryptPlaintextRequest) GetEncryptionContext() map[string]string {
	if o == nil || o.EncryptionContext == nil {
		var ret map[string]string
		return ret
	}
	return *o.EncryptionContext
}

// GetEncryptionContextOk returns a tuple with the EncryptionContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptPlaintextRequest) GetEncryptionContextOk() (*map[string]string, bool) {
	if o == nil || o.EncryptionContext == nil {
		return nil, false
	}
	return o.EncryptionContext, true
}

// HasEncryptionContext returns a boolean if a field has been set.
func (o *EncryptPlaintextRequest) HasEncryptionContext() bool {
	if o != nil && o.EncryptionContext != nil {
		return true
	}

	return false
}

// SetEncryptionContext gets a reference to the given map[string]string and assigns it to the EncryptionContext field.
func (o *EncryptPlaintextRequest) SetEncryptionContext(v map[string]string) {
	o.EncryptionContext = &v
}

// GetMasterKeyId returns the MasterKeyId field value
func (o *EncryptPlaintextRequest) GetMasterKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MasterKeyId
}

// GetMasterKeyIdOk returns a tuple with the MasterKeyId field value
// and a boolean to check if the value has been set.
func (o *EncryptPlaintextRequest) GetMasterKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MasterKeyId, true
}

// SetMasterKeyId sets field value
func (o *EncryptPlaintextRequest) SetMasterKeyId(v string) {
	o.MasterKeyId = v
}

// GetPlaintext returns the Plaintext field value
func (o *EncryptPlaintextRequest) GetPlaintext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Plaintext
}

// GetPlaintextOk returns a tuple with the Plaintext field value
// and a boolean to check if the value has been set.
func (o *EncryptPlaintextRequest) GetPlaintextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plaintext, true
}

// SetPlaintext sets field value
func (o *EncryptPlaintextRequest) SetPlaintext(v string) {
	o.Plaintext = v
}

func (o EncryptPlaintextRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DryRun != nil {
		toSerialize["DryRun"] = o.DryRun
	}
	if o.EncryptionContext != nil {
		toSerialize["EncryptionContext"] = o.EncryptionContext
	}
	if true {
		toSerialize["MasterKeyId"] = o.MasterKeyId
	}
	if true {
		toSerialize["Plaintext"] = o.Plaintext
	}
	return json.Marshal(toSerialize)
}

type NullableEncryptPlaintextRequest struct {
	value *EncryptPlaintextRequest
	isSet bool
}

func (v NullableEncryptPlaintextRequest) Get() *EncryptPlaintextRequest {
	return v.value
}

func (v *NullableEncryptPlaintextRequest) Set(val *EncryptPlaintextRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptPlaintextRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptPlaintextRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptPlaintextRequest(val *EncryptPlaintextRequest) *NullableEncryptPlaintextRequest {
	return &NullableEncryptPlaintextRequest{value: val, isSet: true}
}

func (v NullableEncryptPlaintextRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptPlaintextRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
